#!/bin/bash

{# Parameters for the job scheduler SLURM, see https://support.ceci-hpc.be/doc/_contents/QuickStart/SubmittingJobs/SlurmTutorial.html -#}
#SBATCH --output=slurm_output.log
#SBATCH --job-name={{ source_name }}_{{ transition }}_{{ process }}
#SBATCH --mail-user={{ user_email }}
#SBATCH --mail-type={{ mail_type }}
#SBATCH --time={{ job_walltime }}
#SBATCH --ntasks=1
#SBATCH --mem-per-cpu={{ job_memory }}
{% if partition != None -%}
#SBATCH --partition={{ partition }}
{%- endif %}

echo -e "******************************************************************************"
echo -e "**************************   Beginning of the job   **************************"
echo -e "******************************************************************************\n"

cd $SLURM_SUBMIT_DIR

# Define the QOCT-RA directory here
QOCT_RA_DIR="${CECIHOME}/QOCT-RA"

echo -e "======================================================================="
echo -e "=========================   Running QOCT-RA   ========================="
echo -e "======================================================================="

# A temporary directory (SCRATCH) is created on the node where the job is running, for handling temporary files. 
# See https://support.ceci-hpc.be/doc/_contents/SubmittingJobs/SlurmFAQ.html#q11-how-do-i-use-the-local-scratch-space for more details.

SCRATCH=$LOCALSCRATCH/$SLURM_JOB_ID

echo -e "Creating temporary directory $SCRATCH for handling temporary files."

mkdir -p $SCRATCH || exit $?

cp $SLURM_SUBMIT_DIR/{{ rendered_param }} $SLURM_SUBMIT_DIR/{{ rendered_param_PCP }} $SCRATCH/ || exit $?

cd $SCRATCH

# Load the necessary modules

{% for set_env_line in set_env -%}
{{ set_env_line }}
{% endfor -%}

# Compile the code (cluster dependent)

echo -e ">>> Start of QOCT-RA compilation"
gfortran -lopenblas -O3 -ffast-math -funroll-loops -fwhole-program -flto -fexternal-blas -fdefault-integer-8 -m64 $QOCT_RA_DIR/Sub/Fortran/mymod.f $QOCT_RA_DIR/Controle.f90 -o Controle.out
rm mymod.mod  
echo -e ">>> End of QOCT-RA compilation"

# First execution to get the optimal pulse

echo -e "\n================= First QOCT-RA execution begins now =================="
./Controle.out {{ rendered_param }} $QOCT_RA_DIR || (cp -r  $SCRATCH/* $SLURM_SUBMIT_DIR/ && echo "A problem has occcured during the first execution of QOCT-RA" && rm -rf $SCRATCH && exit $?)
echo -e "\n================= First QOCT-RA execution ends now =================="

# Second execution to test the optimal pulse (PCP mode)

mkdir $SCRATCH/PCP
mv Controle.out $SCRATCH/PCP/
cd $SCRATCH/PCP/

echo -e "\n================= PCP QOCT-RA execution begins now =================="
./Controle.out $SCRATCH/{{ rendered_param_PCP }} $QOCT_RA_DIR || (cp -r  $SCRATCH/* $SLURM_SUBMIT_DIR/ && echo "A problem has occcured during the PCP execution of QOCT-RA" && rm -rf $SCRATCH && exit $?)
rm Controle.out
echo -e "\n================= PCP QOCT-RA execution ends now =================="

echo -e "\nCopying output files to the submit directory."
cp -r  $SCRATCH/* $SLURM_SUBMIT_DIR/  || (echo "Unable to copy SCRATCH directory in the SLURM_SUBMIT_DIR" && exit $?)

echo -e "\nRemoving $SCRATCH directory."
rm -rf $SCRATCH || echo "A problem might have occurred when trying to remove temporary files."

echo -e "\n===================================================================="
echo -e "==============   Post-calculation files manipulation   ============="
echo -e "===================================================================="

cd $SLURM_SUBMIT_DIR

# Add a notification line to finish_list.end

echo -e "\nAdd notification line to {{ mol_dir }}/finish_list.end"
echo "Finished job with the {{ transition }} transition" >> {{ mol_dir }}/finish_list.end

{% if copy_files is sameas true -%}
# If it was the last job, copy the data directory and the finish_list.end file to {{ output_dir }}

if [ $(cat {{ mol_dir }}/finish_list.end | wc -l) -eq {{ nb_transitions }} ]; then

  echo -e "\nAll jobs finished. Copying finish_list.end to {{ output_dir }}."
  mkdir -p {{ output_dir }}
  cp {{ mol_dir }}/finish_list.end {{ output_dir }}/{{ source_name }}.end

  res_data_dir="{{ results_dir }}/{{ source_name }}/CONTROL"
  echo -e "\nCopying data files to $res_data_dir."
  mkdir -p $res_data_dir
  cp -rf  {{ data_dir }} $res_data_dir

fi

# Copying results file

res_dir="{{ results_dir }}/{{ source_name }}/CONTROL/{{ job_dirname }}"

echo -e "\nCopying job files to ${res_dir}."
mkdir -p $res_dir
cp {{ rendered_param }} {{ rendered_param_PCP }} {{ job_script }} slurm_output.log obj.res  $res_dir

echo -e "\nCopying and renaming pulse files to ${res_dir}/Pulse."
mkdir -p $res_dir/Pulse
cd $SLURM_SUBMIT_DIR/Pulse/
cp Pixel_heat{{ max_iter }} Pulse_init Pulse_iter{{ max_iter }} Pulse_param_init Pulse_param_iter{{ max_iter }} $res_dir/Pulse
mv $res_dir/Pulse/Pixel_heat{{ max_iter }} $res_dir/Pulse/Pixel_heat_final
mv $res_dir/Pulse/Pulse_iter{{ max_iter }} $res_dir/Pulse/Pulse_final
mv $res_dir/Pulse/Pulse_param_iter{{ max_iter }} $res_dir/Pulse/Pulse_param_final

echo -e "\nCopying PCP files to ${res_dir}/PCP."
mkdir -p $res_dir/PCP
cd $SLURM_SUBMIT_DIR/PCP/
cp obj.res pop1 popzero1 popzero_Sch1 $res_dir/PCP/
{%- endif %}

echo -e "\n******************************************************************************"
echo -e "*****************************   End of the job   *****************************"
echo -e "******************************************************************************"
