&GENERAL
  system_name = "{{ source_name }}",
  process = "{{ process }}"                     ! Nature of the process: [OPC] Optimal control, [OPM] Optimal control with multiple constraints; [PCP] Post-control with pulse [PCL] Free post-control
/

&DATA_FILES
  energies = "{{ energies_file_path }}",        ! Path towards the energies file in Hartree
  dip_mtx = "{{ momdip_path }}",                ! Path towards the transition dipole moments matrix file in atomic units
  initial = "{{ init_file_path }}",             ! Path towards the initial state file
  target = "{{ target_file_path }}"             ! Path towards the target state file
  projector = "{{ projector_path }}"            ! Path towards the projector file
/

&CONTROL
  max_iter = {{ max_iter }},                    ! Maximum number of iterations
  thresh = {{ threshold }},                     ! Convergence threshold for the fidelity
  time_step = {{ time_step }},                  ! Duration of a time step (a.u. of time)
  start_pulse = "{{ start_pulse }}"             ! Reuse previous pulse (OPC, PCP) or initial states reading (PCL)
  guess_pulse = "{{ guess_pulse }}"             ! Path towards the guess pulse file
/

&OPC
{% if process == "OPC" %}
  nb_steps = {{ nb_steps }},                               ! Number of time steps
{% if max_fluence is not defined or max_fluence is sameas false %}
  alpha = {{ alpha }},                                     ! Constraint on the field amplitude
{%- endif %}
  write_freq = {{ write_freq }},                           ! Number of iterations between each writing of the field
{% if max_fluence is sameas true %}
  fluence = {{ fluence }},                                 ! Maximum fluence of the pulse, in J/m^2
{%- endif %}
{% if spectral_filter is defined %}
{% if spectral_filter == "SGW" or spectral_filter == "SPGW" %}
  spectral_filter_center = {{  spectral_filter_center  }}, ! Central frequency of the pulse, in cm-1
  spectral_filter_fwhm = {{  spectral_filter_fwhm  }}      ! Spectral bandwidth (FWHM) of the pulse, in cm-1
  filter_form = "{{  spectral_filter  }}"                  ! Form of the filter function: [SGW] = single Gaussian-type (default) ; [MGW] = multiple Gaussian-type ; [SPGW] = Super Gaussian-type
{% elif spectral_filter.upper() == "MGW" %}
  spectral_filter_fwhm = {{  spectral_filter_fwhm  }}      ! Spectral bandwidth (FWHM) of the pulse, in cm-1
  filter_form = "{{  spectral_filter  }}"                  ! Form of the filter function: [SGW] = single Gaussian-type (default) ; [MGW] = multiple Gaussian-type ; [SPGW] = Super Gaussian-type
{%- endif -%}
{%- endif -%}
{%- endif %}
/

{% if process == "OPM" -%}
&OPM
  numberofpixels = {{ numberofpixels }},
  inputenergy = {{ inputenergy }},                         ! in microjoule per cm2
  widthhalfmax = {{ widthhalfmax }},                       ! in spectrum, in cm-1
  omegazero = {{ omegazero }}                              ! in spectrum, in cm-1
/
{%- endif %}

&POST_CONTROL
{% if process == "PCP" %}
  analy_freq = {{ analy_freq }},                ! Number of steps between each analysis of the populations, phases, positions and energies
  conv_mtx = "{{ conv_mtx_path }}",             ! Conversion matrix, from eigenstates to zero order states
  init_time = 20661110.d0                       ! PCL temps initial (phase)
{% else -%}
  conv_mtx = "{{ conv_mtx_path }}"              ! Conversion matrix, from eigenstates to zero order states
{%- endif %}
/

&OPTIONS
  pulses = 2,                                   ! Enable writing of the pulses ([2] = every iteration)
  best = 1
/
{{ " " }} {# Make sure the namelist ends by a blank line #}