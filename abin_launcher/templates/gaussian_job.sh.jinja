#!/bin/bash

#SBATCH --output=slurm_output.log
#SBATCH --job-name={{ mol_name }}_{{ config_file }}
#SBATCH --mail-user={{ user_email }}
#SBATCH --mail-type={{ mail_type }}
#SBATCH --time={{ job_walltime }}
#SBATCH --ntasks={{ job_cores }}
#SBATCH --mem-per-cpu={{ job_mem_per_cpu }}
{% if cluster_name == "dragon1" or cluster_name == "dragon2" -%}
#SBATCH --ntasks-per-node={{ job_cores }}
{%- endif %}
{% if partition != None -%}
#SBATCH --partition={{ partition }}
{%- endif %}
echo -e "******************************************************************************"
echo -e "**************************   Beginning of the job   **************************"
echo -e "******************************************************************************\n"

echo -e "========================================================================"
echo -e "=========================   Running GAUSSIAN   ========================="
echo -e "========================================================================"

echo -e "\nRenaming the original .xyz file to avoid overwriting it with the new one."
cd $SLURM_SUBMIT_DIR
mv {{ mol_name }}.xyz {{ mol_name }}_ori.xyz

# A temporary directory (SCRATCH) is created on the node where the job is running, for handling temporary files. 
# See https://support.ceci-hpc.be/doc/_contents/SubmittingJobs/SlurmFAQ.html#q11-how-do-i-use-the-local-scratch-space for more details.

SCRATCH=$LOCALSCRATCH/$SLURM_JOB_ID

echo -e "\nCreating temporary directory $SCRATCH for handling temporary files."
mkdir -p $SCRATCH || exit $?
cp -rf $SLURM_SUBMIT_DIR/{{ mol_name }}.com $SCRATCH/ || exit $?

cd $SCRATCH

echo -e "\n================= GAUSSIAN execution begins now =================="

{% for set_env_line in set_env -%}
{{ set_env_line }}
{% endfor -%}
{{ command }} {{ mol_name }}.com || (cp {{ mol_name }}.log && rm -rf $SCRATCH ; exit $?)

echo -e "\n=================  GAUSSIAN execution ends now  =================="

echo -e "\nCopying GAUSSIAN output files to the submit directory."
cp -r  $SCRATCH/* $SLURM_SUBMIT_DIR/  || exit $?

echo -e "\nRemoving $SCRATCH directory."
rm -rf $SCRATCH || echo "A problem might have occurred when trying to remove temporary files."

echo -e "\n===================================================================="
echo -e "==============   Post-calculation files manipulation   ============="
echo -e "===================================================================="

# Quality control (was there any problem with GAUSSIAN?)
cd $SLURM_SUBMIT_DIR
source {{ chains_dir }}/load_modules.sh
python {{ check_dir }}/gaussian_check.py {{ mol_name }}.log  || exit $?

# Reload Gaussian in order to use some of its useful scripts
{% for set_env_line in set_env -%}
{{ set_env_line }}
{% endfor -%}

# Extracting optimized geometry from checkpoint file
echo -e "\nExtracting optimized geometry from checkpoint file."
newzmat -ichk -oxyz -step 9999 {{ mol_name }}.chk {{ mol_name }}.xyz
echo -e "\nAdding missing header to XYZ file."
NUMBER_ATOMS=$(wc -l < {{ mol_name }}.xyz)
sed -i "1s;^;${NUMBER_ATOMS}\nOptimized geometry from job ${SLURM_JOB_ID} on cluster {{ cluster_name }} \n;" {{ mol_name }}.xyz

# Archive checkpoint file
echo -e "\nArchiving checkpoint file."
formchk {{ mol_name }}.chk {{ mol_name }}.fchk # Convert the checkpoint file from binary to text file
bzip2 {{ mol_name }}.fchk
rm {{ mol_name }}.chk

{% if copy_files is sameas true -%}

# Execute the Python script computing the ionization potential (IP) of the molecule.

echo -e "\nComputing the ionization potential (IP) of the molecule ...\n\n"
source {{ chains_dir }}/load_modules.sh
python {{ chains_dir }}/IP_calc.py -s {{ mol_name }}.log -o {{ ip_file }}
{% if (cation_energy == "sp" or cation_energy == "opt") -%}
rm {{ mol_name }}_cation.chk
{%- endif %}

# Copy the various output files to their respective results directory

echo -e "\n\nCopying optimized geometry to {{ output_dir }}."
mkdir -p {{ output_dir }}
cp {{ mol_name }}.xyz {{ output_dir }}/

res_dir="{{ results_dir }}/{{ mol_name }}/GAUSSIAN"
echo -e "\nCopying output files to $res_dir."
mkdir -p $res_dir
cp {{ mol_name }}.com {{ mol_name }}.log {{ mol_name }}.xyz {{ mol_name }}_ori.xyz {{ job_script }} slurm_output.log {{ mol_name }}_{{ config_file }}.log $res_dir
{%- endif %}

{% if benchmark is sameas true -%}
{% include "benchmark.jinja" %}
{%- endif %}

echo -e "\n******************************************************************************"
echo -e "*****************************   End of the job   *****************************"
echo -e "******************************************************************************"