{# Job instructions for compiling data about the job for benchmarking. -#}
echo -e "\n===================================================================="
echo -e "=====================   Benchmarking Section   ====================="
echo -e "===================================================================="

####################################
#    Benchmarking configuration    #
####################################

# Define the name of the directory where the benchmark CSV files will be created

benchmark_dir="{{ benchmark_dir }}"

# Define the name of the temporary CSV file where data will be stored

filename="{{ prog }}_{{ cluster_name }}_tmp.csv"

echo -e "\nCompiling data for benchmarking in ${benchmark_dir}/${filename}."

####################################
#         Preparation step         #
####################################

# Create the directory where the file will be created, if needed

mkdir -p ${benchmark_dir}

# If the file doesn't already exist, create it with a header as first line

header="Program;Cluster;Jobscale;Partition;Cores;MB/CPU;Walltime;Job ID;Job Name;Scaling Function;Scale Index;Submit Date;Eligible Date;Start Date;End Date;Nodes;Nodes List"

if [ ! -f "${benchmark_dir}/${filename}" ]; then
    echo -e "\nFile ${filename} does not exist in ${benchmark_dir}, a new one will be created."
    echo ${header} >> ${benchmark_dir}/${filename}
fi

echo -e "\nFormat:"
echo -e "${header}"

# Format SLURM dates to be (almost) readable through Excel

export SLURM_TIME_FORMAT="%Y-%m-%d_%H:%M:%S"

# /!\ Specific to the lemaitre3 cluster from CECI /!\
# On lemaitre3, the output has a useless first line, so we need to remove it

{% if cluster_name == 'lemaitre3' -%}
out_line=2
{%- else -%}
out_line=1
{%- endif %}

####################################
#       Start of benchmarking      #
####################################

# Some values are obtained through the use of the squeue command, see https://slurm.schedmd.com/squeue.html for more information.

# Get the name of the partition and the number of CPUs requested

req=$(\squeue --Format=Partition,MaxCPUs --noheader --job=$SLURM_JOB_ID | awk "NR==$out_line" | tr -s ' ' , | sed 's/,/;/g')

# Get the dates in an (almost) readable format through Excel

dates_raw=$(\squeue --Format=SubmitTime,EligibleTime,StartTime --noheader --job=$SLURM_JOB_ID | awk "NR==$out_line" | tr -s ' ' , | sed 's/,/;/g')

# Get the current date (to calculate time used by the job)

end_time=$(date +"%Y-%m-%d_%H:%M:%S")

# Replace the underscores with a space to allow Excel to read the dates

dates=$(echo "${dates_raw}${end_time}" | tr -s _ " ")

# Store everything into a variable

infos="{{ prog }};{{ cluster_name }};{{ jobscale_label }};${req}{{ job_mem_per_cpu }};{{ job_walltime }};$SLURM_JOB_ID;$SLURM_JOB_NAME;{{ scaling_function }};{{ scale_index }};${dates};$SLURM_NNODES;$SLURM_NODELIST"

echo -e "\nContent:"
echo -e "${infos}"

# Add line to file

echo ${infos} >> ${benchmark_dir}/${filename}
